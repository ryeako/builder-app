// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface Dump {
    metadata: Metadata;
    data:     Data;
}

export interface Data {
    all_model_wargear_choice_set:             WargearChoiceSet[];
    all_model_wargear_choice_wargear_item:    AllModelWargearChoiceWargearItem[];
    all_model_wargear_choice:                 AllModelWargearChoice[];
    allegiance_ability_group:                 AllegianceAbilityGroup[];
    allegiance_ability:                       AllegianceAbility[];
    allied_faction_allegiance_ability:        AlliedFactionAllegianceAbility[];
    allied_faction_allowed_warlord_miniature: AlliedFactionAllowedWarlordMiniature[];
    allied_faction_datasheet:                 AlliedFactionDatasheet[];
    allied_faction_keyword:                   AlliedFactionKeyword[];
    allied_faction_parent_faction_keyword:    AlliedFactionParentFactionKeyword[];
    allied_faction:                           AlliedFaction[];
    army_rule:                                ArmyRule[];
    army_rule_faction_keyword:                ArmyRuleFactionKeyword[];
    bullet_point:                             BulletPoint[];
    conditional_keyword:                      ConditionalKeyword[];
    datasheet_ability:                        DatasheetAbility[];
    datasheet_damage:                         DatasheetDamageElement[];
    datasheet_datasheet_ability:              DatasheetDatasheetAbility[];
    datasheet_faction_keyword:                DatasheetFactionKeyword[];
    datasheet_rule:                           DatasheetDamageElement[];
    datasheet_sub_ability:                    DatasheetDamageElement[];
    datasheet:                                Datasheet[];
    detachment_faction_keyword:               DetachmentFactionKeyword[];
    detachment:                               ArmyRule[];
    enhancement_datasheet_ability:            any[];
    enhancement_excluded_keyword:             EnhancementEdKeyword[];
    enhancement_keyword_points_cost:          any[];
    enhancement_required_keyword:             EnhancementEdKeyword[];
    enhancement:                              Enhancement[];
    faction_keyword_allied_faction:           AlliedFactionParentFactionKeyword[];
    faction_keyword_excluded_datasheet:       FactionKeywordExcludedDatasheet[];
    faction_keyword:                          FactionKeyword[];
    invulnerable_save:                        InvulnerableSave[];
    keyword_restriction_group_keyword:        KeywordRestrictionGroupKeyword[];
    keyword_restriction_group:                KeywordRestrictionGroup[];
    keyword:                                  Keyword[];
    limited_wargear_choice_set:               WargearChoiceSet[];
    limited_wargear_choice_wargear_item:      LimitedWargearChoiceWargearItem[];
    limited_wargear_choice:                   LimitedWargearChoice[];
    loadout_choice_set:                       LoadoutChoiceSet[];
    loadout_choice_wargear_item:              LoadoutChoiceWargearItem[];
    loadout_choice:                           LoadoutChoice[];
    miniature_keyword:                        MiniatureKeyword[];
    miniature:                                Miniature[];
    publication:                              Publication[];
    rule_container_component:                 RuleContainerComponent[];
    rule_container:                           RuleContainer[];
    rule_section:                             ArmyRule[];
    stratagem:                                Stratagem[];
    unit_composition_miniature:               UnitCompositionMiniature[];
    unit_composition:                         UnitComposition[];
    wargear_ability:                          WargearAbility[];
    wargear_item_profile_wargear_ability:     WargearItemProfileWargearAbility[];
    wargear_item_profile:                     WargearItemProfile[];
    wargear_item:                             WargearItem[];
    wargear_limit:                            WargearLimit[];
    wargear_option_group:                     WargearOptionGroup[];
    wargear_option:                           WargearOption[];
    wargear_rule:                             WargearRule[];
    detachment_rule:                          AllegianceAbilityGroup[];
    detachment_detail:                        DetachmentDetail[];
    detachment_detail_bullet_point:           DetachmentDetailBulletPoint[];
}

export interface AllModelWargearChoice {
    id:                         string;
    allModelWargearChoiceSetId: string;
    substitute:                 boolean;
}

export interface WargearChoiceSet {
    id:          string;
    miniatureId: null | string;
    datasheetId: string;
    mandatory?:  boolean;
}

export interface AllModelWargearChoiceWargearItem {
    allModelWargearChoiceId: string;
    wargearItemId:           string;
    count:                   number;
}

export interface AllegianceAbility {
    id:                       string;
    name:                     string;
    rules:                    string;
    displayOrder:             number;
    requiresWargearItemId:    null | string;
    allegianceAbilityGroupId: string;
}

export interface AllegianceAbilityGroup {
    id:            string;
    name:          string;
    detachmentId:  null | string;
    displayOrder?: number;
}

export interface AlliedFaction {
    id:                              string;
    requiredWarlordMiniatureId:      null | string;
    incursionPointsLimit:            number | null;
    strikeForcePointsLimit:          number | null;
    onslaughtPointsLimit:            number | null;
    canTakeEnhancements:             boolean;
    isMutuallyExclusiveKeywordLimit: boolean;
}

export interface AlliedFactionAllegianceAbility {
    alliedFactionId:     string;
    allegianceAbilityId: string;
}

export interface AlliedFactionAllowedWarlordMiniature {
    miniatureId:     string;
    alliedFactionId: string;
}

export interface AlliedFactionDatasheet {
    alliedFactionId: string;
    datasheetId:     string;
}

export interface AlliedFactionKeyword {
    id:                         string;
    keywordId:                  string;
    alliedFactionId:            string;
    battleSize:                 BattleSize;
    limitCount:                 number;
    requiredWarlordMiniatureId: null | string;
}

export enum BattleSize {
    Incursion = "incursion",
    Onslaught = "onslaught",
    Strikeforce = "strikeforce",
}

export interface AlliedFactionParentFactionKeyword {
    alliedFactionId:  string;
    factionKeywordId: string;
}

export interface ArmyRule {
    id:             string;
    name:           string;
    publicationId?: string;
    displayOrder:   number;
    parentId?:      null | string;
}

export interface ArmyRuleFactionKeyword {
    armyRuleId:       string;
    factionKeywordId: string;
}

export interface BulletPoint {
    id:                       string;
    text:                     string;
    indent:                   number;
    displayOrder:             number;
    ruleContainerComponentId: string;
}

export interface ConditionalKeyword {
    id:                          string;
    datasheetId:                 string;
    keywordId:                   string;
    requiredWarlordMiniatureId:  null | string;
    requiredAllegianceAbilityId: null | string;
}

export interface Datasheet {
    id:                       string;
    name:                     string;
    maxModelCount:            number | null;
    publicationId:            string;
    bannerImage:              string;
    rowImage:                 string;
    isCombatPatrol:           boolean;
    isSuccessorChapter:       boolean;
    lore:                     string;
    displayOrder:             number;
    allegianceAbilityGroupId: null | string;
    unitComposition:          string;
}

export interface DatasheetAbility {
    id:          string;
    name:        string;
    abilityType: AbilityType;
    rules:       string;
    lore:        null | string;
    armyRuleId:  null | string;
    isAura:      boolean;
    isBondsman:  boolean;
    isPsychic:   boolean;
}

export enum AbilityType {
    Core = "core",
    Datasheet = "datasheet",
    Faction = "faction",
}

export interface DatasheetDamageElement {
    id:                  string;
    name:                string;
    rules:               string;
    displayOrder:        number;
    datasheetId?:        string;
    datasheetAbilityId?: string;
}

export interface DatasheetDatasheetAbility {
    id:                 string;
    restriction:        null | string;
    displayOrder:       number;
    datasheetId:        string;
    datasheetAbilityId: string;
}

export interface DatasheetFactionKeyword {
    datasheetId:      string;
    factionKeywordId: string;
    displayOrder:     number;
}

export interface DetachmentDetail {
    id:           string;
    title:        string;
    displayOrder: number;
    detachmentId: string;
}

export interface DetachmentDetailBulletPoint {
    id:                 string;
    text:               string;
    displayOrder:       number;
    detachmentDetailId: string;
}

export interface DetachmentFactionKeyword {
    detachmentId:     string;
    factionKeywordId: string;
}

export interface Enhancement {
    id:             string;
    name:           string;
    lore:           string;
    rules:          string;
    detachmentId:   null | string;
    basePointsCost: number | null;
    displayOrder:   number;
    isCombatPatrol: boolean;
    publicationId:  string;
}

export interface EnhancementEdKeyword {
    enhancementId: string;
    keywordId:     string;
}

export interface FactionKeyword {
    id:                      string;
    name:                    string;
    commonName:              null | string;
    lore:                    string;
    excludedFromArmyBuilder: boolean;
    rosterHeaderImage:       string;
    armySelectionImage:      string;
    moreInfoImage:           string;
    rosterFactionImage:      string;
    parentFactionKeywordId:  null | string;
}

export interface FactionKeywordExcludedDatasheet {
    factionKeywordId: string;
    datasheetId:      string;
}

export interface InvulnerableSave {
    id:          string;
    save:        Save;
    rules:       null | string;
    datasheetId: string;
    miniatureId: null | string;
}

export enum Save {
    NA = "N/A",
    Save2 = "2+ ",
    The2 = "2+",
    The3 = "3+",
    The4 = "4+",
    The5 = "5+",
    The6 = "6+",
}

export interface Keyword {
    id:   string;
    name: string;
}

export interface KeywordRestrictionGroup {
    id:                         string;
    factionKeywordId:           string;
    limit:                      number;
    requiresWarlordMiniatureId: null | string;
}

export interface KeywordRestrictionGroupKeyword {
    keywordRestrictionGroupId: string;
    keywordId:                 string;
}

export interface LimitedWargearChoice {
    id:                        string;
    limitedWargearChoiceSetId: string;
}

export interface LimitedWargearChoiceWargearItem {
    limitedWargearChoiceId: string;
    wargearItemId:          string;
    count:                  number;
}

export interface LoadoutChoice {
    id:                 string;
    loadoutChoiceSetId: string;
}

export interface LoadoutChoiceSet {
    id:              string;
    miniatureId:     null | string;
    datasheetId:     string;
    limit:           number;
    allowDuplicates: boolean;
    alternate:       boolean;
}

export interface LoadoutChoiceWargearItem {
    loadoutChoiceId: string;
    wargearItemId:   string;
    count:           number;
}

export interface Miniature {
    id:                       string;
    name:                     string;
    movement:                 Movement;
    toughness:                string;
    save:                     string;
    wounds:                   string;
    leadership:               Leadership;
    objectiveControl:         string;
    displayOrder:             number;
    statlineHidden:           boolean;
    isIndividualModels:       boolean;
    excludedFromEnhancements: boolean;
    cannotBeWarlord:          boolean;
    isSupremeCommander:       boolean;
    datasheetId:              string;
}

export enum Leadership {
    Empty = "-",
    The4 = "4+",
    The5 = "5+",
    The6 = "6+",
    The7 = "7+",
    The8 = "8+",
}

export enum Movement {
    Empty = "-",
    The10 = "10\"",
    The11 = "11\"",
    The12 = "12\"",
    The14 = "14\"",
    The16 = "16\"",
    The20 = "20+\"",
    The3 = "3\"",
    The4 = "4\"",
    The5 = "5\"",
    The6 = "6\"",
    The7 = "7\"",
    The8 = "8\"",
    The9 = "9\"",
}

export interface MiniatureKeyword {
    id:           string;
    miniatureId:  string;
    keywordId:    string;
    displayOrder: number;
}

export interface Publication {
    id:                     string;
    name:                   string;
    combatPatrolName:       null | string;
    factionBackgroundImage: string;
    factionKeywordId:       null | string;
    isCoreRules:            boolean;
}

export interface RuleContainer {
    id:            string;
    title:         string;
    subtitle:      null;
    containerType: ContainerType;
    displayOrder:  number;
    ruleSectionId: string;
    stratagemId:   null | string;
}

export enum ContainerType {
    DeploymentAbility = "deploymentAbility",
    Introduction = "introduction",
    Standard = "standard",
    Stratagem = "stratagem",
}

export interface RuleContainerComponent {
    id:               string;
    textContent:      string;
    displayOrder:     number;
    type:             RuleContainerComponentType;
    altText:          null;
    imageUrl:         null | string;
    title:            null | string;
    subtitle:         null | string;
    backgroundColor:  null;
    ruleContainerId:  null | string;
    armyRuleId:       null | string;
    detachmentRuleId: null | string;
}

export enum RuleContainerComponentType {
    Accordion = "accordion",
    BoxedText = "boxedText",
    Bullets = "bullets",
    Header = "header",
    Image = "image",
    LoreAccordion = "loreAccordion",
    Quote = "quote",
    Text = "text",
    TextBold = "textBold",
    TextItalic = "textItalic",
}

export interface Stratagem {
    id:               string;
    name:             string;
    lore:             string;
    whenRules:        string;
    targetRules:      string;
    effectRules:      string;
    restrictionRules: null | string;
    key:              Key;
    category:         Category;
    cpCost:           string;
    displayOrder:     number;
    publicationId:    string;
    detachmentId:     null | string;
}

export enum Category {
    BattleTactic = "battleTactic",
    EpicDeed = "epicDeed",
    StrategicPloy = "strategicPloy",
    Wargear = "wargear",
}

export enum Key {
    EitherPlayer = "eitherPlayer",
    OpponentsTurn = "opponentsTurn",
    YourTurn = "yourTurn",
}

export interface UnitComposition {
    id:           string;
    isDefault:    boolean;
    points:       number;
    displayOrder: number;
    datasheetId:  string;
}

export interface UnitCompositionMiniature {
    id:                string;
    miniatureId:       string;
    min:               number;
    max:               number;
    unitCompositionId: string;
}

export interface WargearAbility {
    id:    string;
    name:  string;
    lore:  null | string;
    rules: string;
}

export interface WargearItem {
    id:          string;
    name:        string;
    wargearType: WargearType;
    ruleText:    null | string;
}

export enum WargearType {
    Wargear = "wargear",
    Weapon = "weapon",
}

export interface WargearItemProfile {
    id:                string;
    name:              string;
    type:              WargearItemProfileType;
    range:             Range;
    attacks:           string;
    ballisticSkill:    Save | null;
    weaponSkill:       null | string;
    strength:          string;
    armourPenetration: string;
    damage:            string;
    displayOrder:      number;
    wargearItemId:     string;
}

export enum Range {
    Melee = "Melee",
    NA = "N/A",
    The10 = "10\"",
    The100 = "100\"",
    The12 = "12\"",
    The120 = "120\"",
    The18 = "18\"",
    The20 = "20\"",
    The200 = "200\"",
    The24 = "24\"",
    The240 = "240\"",
    The26 = "26\"",
    The280 = "280\"",
    The3 = "3\"",
    The30 = "30\"",
    The36 = "36\"",
    The48 = "48\"",
    The480 = "480\"",
    The6 = "6\"",
    The60 = "60\"",
    The72 = "72\"",
    The9 = "9\"",
    The96 = "96\"",
}

export enum WargearItemProfileType {
    Ctanpowers = "ctanpowers",
    Melee = "melee",
    Ranged = "ranged",
}

export interface WargearItemProfileWargearAbility {
    id:                   string;
    wargearItemProfileId: string;
    wargearAbilityId:     string;
    displayOrder:         number;
}

export interface WargearLimit {
    id:                        string;
    limitedWargearChoiceSetId: string;
    modelCount:                number;
    choiceLimit:               number;
    duplicateLimit:            number | null;
}

export interface WargearOption {
    id:                   string;
    inputType:            InputType;
    defaultValue:         number;
    displayOrder:         number;
    wargearItemId:        string;
    wargearOptionGroupId: string;
}

export enum InputType {
    Checkbox = "checkbox",
    Stepper = "stepper",
}

export interface WargearOptionGroup {
    id:              string;
    instructionText: string;
    displayOrder:    number;
    isStaticWargear: boolean;
    datasheetId:     string;
    miniatureId:     null | string;
}

export interface WargearRule {
    id:           string;
    rulesText:    string;
    displayOrder: number;
    datasheetId:  string;
}

export interface Metadata {
    data_version: number;
}
